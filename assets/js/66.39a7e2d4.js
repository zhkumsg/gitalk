(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{160:function(s,a,e){"use strict";e.r(a);var r=e(0),t=Object(r.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"docker-部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-部署"}},[s._v("#")]),s._v(" Docker 部署")]),s._v(" "),e("p",[s._v("本项目支持 pm2 部署和 docker 部署，下面详细介绍 docker 部署的流程")]),s._v(" "),e("p",[s._v("docker 镜像基于 "),e("code",[s._v("alpine")]),s._v("，内部同样使用 "),e("code",[s._v("pm2")]),s._v(" 守卫进程")]),s._v(" "),e("h2",{attrs:{id:"打包镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打包镜像"}},[s._v("#")]),s._v(" 打包镜像")]),s._v(" "),e("p",[s._v("成功安装 docker 后，可使用 docker 打包一个镜像，比如我们希望打一个叫"),e("code",[s._v("node_sso_server")]),s._v("的镜像，命令如下：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker build -t node_sso_server "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),e("p",[s._v("执行完成后会生成一个叫"),e("code",[s._v("node_sso_server")]),s._v("的镜像")]),s._v(" "),e("p",[s._v("打包完成后，通过"),e("code",[s._v("docekr images")]),s._v("即可查看所打包的全部镜像。")]),s._v(" "),e("p",[e("em",[s._v("PS：第一次打包耗时较长，后续打包会在上一次打包的基础上，打包时间会短一些")])]),s._v(" "),e("h2",{attrs:{id:"导出镜像-选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导出镜像-选"}},[s._v("#")]),s._v(" 导出镜像[选]")]),s._v(" "),e("p",[s._v("因为打包镜像是一个相对耗时的过程，如果网络慢或者其他原因，可以会给部署带来一定的麻烦，所以可以先在网络较好的环境打包好，再导出成压缩包，操作如下：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker save -o node_sso_server.tar node_sso_server\n")])])]),e("p",[s._v("命令执行完后会在当前目录下生成"),e("code",[s._v("node_sso_server.tar")]),s._v("压缩包。")]),s._v(" "),e("h2",{attrs:{id:"导入镜像-选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导入镜像-选"}},[s._v("#")]),s._v(" 导入镜像[选]")]),s._v(" "),e("p",[s._v("有了本地的镜像文件，在需要的时候可以使用 docker load 将本地保存的镜像再次导入 docker 中。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker load --input node_sso_server.tar\n")])])]),e("h2",{attrs:{id:"运行容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行容器"}},[s._v("#")]),s._v(" 运行容器")]),s._v(" "),e("p",[s._v("服务器上有了镜像后，我们可以启动一个容器来运行它，命令如下：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run  -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3000:3000/tcp -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3001:3001/tcp node_sso_server\n")])])]),e("p",[s._v("上面语句的意思是：在后台静默启动"),e("code",[s._v("（-d）")]),s._v("名称为 "),e("code",[s._v("node_sso_server")]),s._v(" 的镜像，并映射两个"),e("code",[s._v("内部端口")]),s._v("到主机上")]),s._v(" "),e("p",[e("em",[s._v("特别注意，此容器需要对外暴露两个端口，默认是 3000 和 3001")])]),s._v(" "),e("h2",{attrs:{id:"进入容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进入容器"}},[s._v("#")]),s._v(" 进入容器")]),s._v(" "),e("p",[s._v("如果需要进入到容器内部，我们可以使用下面命令")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run -it node_sso_server /bin/sh\n")])])]),e("p",[e("em",[s._v("如果切换了基础镜像，可以把 /bin/sh 修改为 /bin/bash")])]),s._v(" "),e("p",[s._v("命令解析为：以非后台方式，使用标准输入输出形式执行 node_sso_server 容器下的"),e("code",[s._v("/bin/sh")]),s._v("命令。")]),s._v(" "),e("h2",{attrs:{id:"查看状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看状态"}},[s._v("#")]),s._v(" 查看状态")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n")])])]),e("h2",{attrs:{id:"停止容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#停止容器"}},[s._v("#")]),s._v(" 停止容器")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker stop node_sso_server\n")])])]),e("h2",{attrs:{id:"自动重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动重启"}},[s._v("#")]),s._v(" 自动重启")]),s._v(" "),e("p",[s._v("在直接使用源码部署时我们可能使用pm2进行开启重启，如果使用了docker，自动重启更加简单，以前面的命令为例")]),s._v(" "),e("p",[e("em",[s._v("原命令")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run  -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3000:3000/tcp -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3001:3001/tcp node_sso_server\n")])])]),e("p",[e("em",[s._v("新命令")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker run --restart"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("always   -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3000:3000/tcp -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:3001:3001/tcp node_sso_server\n")])])]),e("p",[s._v("只需要添加 "),e("code",[s._v("--restart=always")]),s._v(" 即可")])])}),[],!1,null,null,null);a.default=t.exports}}]);